
00_LcdBoosterPack2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001464  08001464  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001464  08001464  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001464  08001464  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001468  08001468  00011468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800146c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  2000005c  080014c8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  080014c8  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001791  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008c8  00000000  00000000  00021859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  00022128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d0  00000000  00000000  000223c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026c2  00000000  00000000  00022590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003d9b  00000000  00000000  00024c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a207  00000000  00000000  000289ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e58  00000000  00000000  00082bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00083a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	080013e4 	.word	0x080013e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	080013e4 	.word	0x080013e4

08000170 <GPIO_Pin_Configure>:
#include "gpio.h"

void GPIO_Pin_Configure(uint8_t GPIO_x, uint32_t Pin, uint32_t MODE, uint32_t FUNC){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	60b9      	str	r1, [r7, #8]
 8000178:	607a      	str	r2, [r7, #4]
 800017a:	603b      	str	r3, [r7, #0]
 800017c:	4603      	mov	r3, r0
 800017e:	73fb      	strb	r3, [r7, #15]
	 * 2. Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL / GPIOx_CRH register.
	 * 3. Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL / GPIOx_CRH register.
	************************************************/

	/*1.Enable clock to access GPIO by setting IOPxEN in RCC_APB2ENR register*/
	RCC->APB2ENR |= GPIO_x;
 8000180:	4b62      	ldr	r3, [pc, #392]	; (800030c <GPIO_Pin_Configure+0x19c>)
 8000182:	699a      	ldr	r2, [r3, #24]
 8000184:	7bfb      	ldrb	r3, [r7, #15]
 8000186:	4961      	ldr	r1, [pc, #388]	; (800030c <GPIO_Pin_Configure+0x19c>)
 8000188:	4313      	orrs	r3, r2
 800018a:	618b      	str	r3, [r1, #24]

	if(Pin < 8){
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	2b07      	cmp	r3, #7
 8000190:	d858      	bhi.n	8000244 <GPIO_Pin_Configure+0xd4>
		switch(GPIO_x){
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	2b10      	cmp	r3, #16
 8000196:	d038      	beq.n	800020a <GPIO_Pin_Configure+0x9a>
 8000198:	2b10      	cmp	r3, #16
 800019a:	dc4f      	bgt.n	800023c <GPIO_Pin_Configure+0xcc>
 800019c:	2b04      	cmp	r3, #4
 800019e:	d002      	beq.n	80001a6 <GPIO_Pin_Configure+0x36>
 80001a0:	2b08      	cmp	r3, #8
 80001a2:	d019      	beq.n	80001d8 <GPIO_Pin_Configure+0x68>
 80001a4:	e04a      	b.n	800023c <GPIO_Pin_Configure+0xcc>
			case GPIO_A:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL register*/
				GPIOA->CRL &= ~(0xf << (Pin << 2));
 80001a6:	4b5a      	ldr	r3, [pc, #360]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	68ba      	ldr	r2, [r7, #8]
 80001ac:	0092      	lsls	r2, r2, #2
 80001ae:	210f      	movs	r1, #15
 80001b0:	fa01 f202 	lsl.w	r2, r1, r2
 80001b4:	43d2      	mvns	r2, r2
 80001b6:	4611      	mov	r1, r2
 80001b8:	4a55      	ldr	r2, [pc, #340]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 80001ba:	400b      	ands	r3, r1
 80001bc:	6013      	str	r3, [r2, #0]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL register*/
				GPIOA->CRL |= ((MODE | FUNC) << (Pin << 2));
 80001be:	4b54      	ldr	r3, [pc, #336]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	6879      	ldr	r1, [r7, #4]
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	4319      	orrs	r1, r3
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	fa01 f303 	lsl.w	r3, r1, r3
 80001d0:	494f      	ldr	r1, [pc, #316]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 80001d2:	4313      	orrs	r3, r2
 80001d4:	600b      	str	r3, [r1, #0]
			break;
 80001d6:	e094      	b.n	8000302 <GPIO_Pin_Configure+0x192>
			case GPIO_B:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL register*/
				GPIOB->CRL &= ~(0xf << (Pin << 2));
 80001d8:	4b4e      	ldr	r3, [pc, #312]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	68ba      	ldr	r2, [r7, #8]
 80001de:	0092      	lsls	r2, r2, #2
 80001e0:	210f      	movs	r1, #15
 80001e2:	fa01 f202 	lsl.w	r2, r1, r2
 80001e6:	43d2      	mvns	r2, r2
 80001e8:	4611      	mov	r1, r2
 80001ea:	4a4a      	ldr	r2, [pc, #296]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 80001ec:	400b      	ands	r3, r1
 80001ee:	6013      	str	r3, [r2, #0]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL register*/
				GPIOB->CRL |= ((MODE | FUNC) << (Pin << 2));
 80001f0:	4b48      	ldr	r3, [pc, #288]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	4319      	orrs	r1, r3
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000202:	4944      	ldr	r1, [pc, #272]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 8000204:	4313      	orrs	r3, r2
 8000206:	600b      	str	r3, [r1, #0]
			break;
 8000208:	e07b      	b.n	8000302 <GPIO_Pin_Configure+0x192>
			case GPIO_C:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL register*/
				GPIOC->CRL &= ~(0xf << (Pin << 2));
 800020a:	4b43      	ldr	r3, [pc, #268]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	68ba      	ldr	r2, [r7, #8]
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	210f      	movs	r1, #15
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	43d2      	mvns	r2, r2
 800021a:	4611      	mov	r1, r2
 800021c:	4a3e      	ldr	r2, [pc, #248]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 800021e:	400b      	ands	r3, r1
 8000220:	6013      	str	r3, [r2, #0]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL register*/
				GPIOC->CRL |= ((MODE | FUNC) << (Pin << 2));
 8000222:	4b3d      	ldr	r3, [pc, #244]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	6879      	ldr	r1, [r7, #4]
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	4319      	orrs	r1, r3
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	fa01 f303 	lsl.w	r3, r1, r3
 8000234:	4938      	ldr	r1, [pc, #224]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 8000236:	4313      	orrs	r3, r2
 8000238:	600b      	str	r3, [r1, #0]
			break;
 800023a:	e062      	b.n	8000302 <GPIO_Pin_Configure+0x192>
			default:
				printf("Error!, gpio.c/GPIO_Pin_Configure\n");
 800023c:	4837      	ldr	r0, [pc, #220]	; (800031c <GPIO_Pin_Configure+0x1ac>)
 800023e:	f000 fd45 	bl	8000ccc <puts>
			break;
 8000242:	e05e      	b.n	8000302 <GPIO_Pin_Configure+0x192>
		}
	}
	else{
		switch(GPIO_x){
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	2b10      	cmp	r3, #16
 8000248:	d03c      	beq.n	80002c4 <GPIO_Pin_Configure+0x154>
 800024a:	2b10      	cmp	r3, #16
 800024c:	dc55      	bgt.n	80002fa <GPIO_Pin_Configure+0x18a>
 800024e:	2b04      	cmp	r3, #4
 8000250:	d002      	beq.n	8000258 <GPIO_Pin_Configure+0xe8>
 8000252:	2b08      	cmp	r3, #8
 8000254:	d01b      	beq.n	800028e <GPIO_Pin_Configure+0x11e>
 8000256:	e050      	b.n	80002fa <GPIO_Pin_Configure+0x18a>
			case GPIO_A:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRH register*/
				GPIOA->CRH &= ~(0xf << ((Pin - 8) << 2));
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	68ba      	ldr	r2, [r7, #8]
 800025e:	3a08      	subs	r2, #8
 8000260:	0092      	lsls	r2, r2, #2
 8000262:	210f      	movs	r1, #15
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	43d2      	mvns	r2, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a28      	ldr	r2, [pc, #160]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 800026e:	400b      	ands	r3, r1
 8000270:	6053      	str	r3, [r2, #4]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRH register*/
				GPIOA->CRH |= ((MODE | FUNC) << ((Pin - 8) << 2));
 8000272:	4b27      	ldr	r3, [pc, #156]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 8000274:	685a      	ldr	r2, [r3, #4]
 8000276:	6879      	ldr	r1, [r7, #4]
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	4319      	orrs	r1, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	3b08      	subs	r3, #8
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	fa01 f303 	lsl.w	r3, r1, r3
 8000286:	4922      	ldr	r1, [pc, #136]	; (8000310 <GPIO_Pin_Configure+0x1a0>)
 8000288:	4313      	orrs	r3, r2
 800028a:	604b      	str	r3, [r1, #4]
			break;
 800028c:	e039      	b.n	8000302 <GPIO_Pin_Configure+0x192>
			case GPIO_B:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRH register*/
				GPIOB->CRH &= ~(0xf << ((Pin - 8) << 2));
 800028e:	4b21      	ldr	r3, [pc, #132]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	3a08      	subs	r2, #8
 8000296:	0092      	lsls	r2, r2, #2
 8000298:	210f      	movs	r1, #15
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	43d2      	mvns	r2, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a1c      	ldr	r2, [pc, #112]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 80002a4:	400b      	ands	r3, r1
 80002a6:	6053      	str	r3, [r2, #4]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRH register*/
				GPIOB->CRH |= ((MODE | FUNC) << ((Pin - 8) << 2));
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	6879      	ldr	r1, [r7, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	4319      	orrs	r1, r3
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	3b08      	subs	r3, #8
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	4915      	ldr	r1, [pc, #84]	; (8000314 <GPIO_Pin_Configure+0x1a4>)
 80002be:	4313      	orrs	r3, r2
 80002c0:	604b      	str	r3, [r1, #4]
			break;
 80002c2:	e01e      	b.n	8000302 <GPIO_Pin_Configure+0x192>
			case GPIO_C:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRH register*/
				GPIOC->CRH &= ~(0xf << ((Pin - 8) << 2));
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	3a08      	subs	r2, #8
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6053      	str	r3, [r2, #4]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRH register*/
				GPIOC->CRH |= ((MODE | FUNC) << ((Pin - 8) << 2));
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 80002e0:	685a      	ldr	r2, [r3, #4]
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	4319      	orrs	r1, r3
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3b08      	subs	r3, #8
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	fa01 f303 	lsl.w	r3, r1, r3
 80002f2:	4909      	ldr	r1, [pc, #36]	; (8000318 <GPIO_Pin_Configure+0x1a8>)
 80002f4:	4313      	orrs	r3, r2
 80002f6:	604b      	str	r3, [r1, #4]
			break;
 80002f8:	e003      	b.n	8000302 <GPIO_Pin_Configure+0x192>
			default:
				printf("Error!, gpio.c/GPIO_Pin_Configure\n");
 80002fa:	4808      	ldr	r0, [pc, #32]	; (800031c <GPIO_Pin_Configure+0x1ac>)
 80002fc:	f000 fce6 	bl	8000ccc <puts>
			break;
 8000300:	bf00      	nop
		}
	}
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000
 8000310:	40010800 	.word	0x40010800
 8000314:	40010c00 	.word	0x40010c00
 8000318:	40011000 	.word	0x40011000
 800031c:	080013fc 	.word	0x080013fc

08000320 <GPIO_set_out_pin>:

void GPIO_set_out_pin(uint8_t GPIO_x, uint32_t Pin, uint8_t STATE){
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
 800032c:	4613      	mov	r3, r2
 800032e:	71bb      	strb	r3, [r7, #6]
	switch(GPIO_x){
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2b10      	cmp	r3, #16
 8000334:	d032      	beq.n	800039c <GPIO_set_out_pin+0x7c>
 8000336:	2b10      	cmp	r3, #16
 8000338:	dc46      	bgt.n	80003c8 <GPIO_set_out_pin+0xa8>
 800033a:	2b04      	cmp	r3, #4
 800033c:	d002      	beq.n	8000344 <GPIO_set_out_pin+0x24>
 800033e:	2b08      	cmp	r3, #8
 8000340:	d016      	beq.n	8000370 <GPIO_set_out_pin+0x50>
 8000342:	e041      	b.n	80003c8 <GPIO_set_out_pin+0xa8>
		case GPIO_A:
			/*Reset ODRx bit by writing 0 in GPIOx_ODR register*/
			GPIOA->ODR &= ~(0x1 << Pin);
 8000344:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <GPIO_set_out_pin+0xb8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	2101      	movs	r1, #1
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	fa01 f202 	lsl.w	r2, r1, r2
 8000350:	43d2      	mvns	r2, r2
 8000352:	4611      	mov	r1, r2
 8000354:	4a20      	ldr	r2, [pc, #128]	; (80003d8 <GPIO_set_out_pin+0xb8>)
 8000356:	400b      	ands	r3, r1
 8000358:	60d3      	str	r3, [r2, #12]

			/*Configure GPIO ouput state by setting ODRx bit in GPIOx_ODR register*/
			GPIOA->ODR |= (STATE << Pin);
 800035a:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <GPIO_set_out_pin+0xb8>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	79b9      	ldrb	r1, [r7, #6]
 8000360:	683a      	ldr	r2, [r7, #0]
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <GPIO_set_out_pin+0xb8>)
 800036a:	430b      	orrs	r3, r1
 800036c:	60d3      	str	r3, [r2, #12]
		break;
 800036e:	e02f      	b.n	80003d0 <GPIO_set_out_pin+0xb0>
		case GPIO_B:
			/*Reset ODRx bit by writing 0 in GPIOx_ODR register*/
			GPIOB->ODR &= ~(0x1 << Pin);
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <GPIO_set_out_pin+0xbc>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	2101      	movs	r1, #1
 8000376:	683a      	ldr	r2, [r7, #0]
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	43d2      	mvns	r2, r2
 800037e:	4611      	mov	r1, r2
 8000380:	4a16      	ldr	r2, [pc, #88]	; (80003dc <GPIO_set_out_pin+0xbc>)
 8000382:	400b      	ands	r3, r1
 8000384:	60d3      	str	r3, [r2, #12]

			/*Configure GPIO ouput state by setting ODRx bit in GPIOx_ODR register*/
			GPIOB->ODR |= (STATE << Pin);
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <GPIO_set_out_pin+0xbc>)
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	79b9      	ldrb	r1, [r7, #6]
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <GPIO_set_out_pin+0xbc>)
 8000396:	430b      	orrs	r3, r1
 8000398:	60d3      	str	r3, [r2, #12]
		break;
 800039a:	e019      	b.n	80003d0 <GPIO_set_out_pin+0xb0>
		case GPIO_C:
			/*Reset ODRx bit by writing 0 in GPIOx_ODR register*/
			GPIOC->ODR &= ~(0x1 << Pin);
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <GPIO_set_out_pin+0xc0>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	2101      	movs	r1, #1
 80003a2:	683a      	ldr	r2, [r7, #0]
 80003a4:	fa01 f202 	lsl.w	r2, r1, r2
 80003a8:	43d2      	mvns	r2, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <GPIO_set_out_pin+0xc0>)
 80003ae:	400b      	ands	r3, r1
 80003b0:	60d3      	str	r3, [r2, #12]

			/*Configure GPIO ouput state by setting ODRx bit in GPIOx_ODR register*/
			GPIOC->ODR |= (STATE << Pin);
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <GPIO_set_out_pin+0xc0>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	79b9      	ldrb	r1, [r7, #6]
 80003b8:	683a      	ldr	r2, [r7, #0]
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	4611      	mov	r1, r2
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <GPIO_set_out_pin+0xc0>)
 80003c2:	430b      	orrs	r3, r1
 80003c4:	60d3      	str	r3, [r2, #12]
		break;
 80003c6:	e003      	b.n	80003d0 <GPIO_set_out_pin+0xb0>
		default:
			printf("Error!, gpio.c/GPIO_set_out_pin\n");
 80003c8:	4806      	ldr	r0, [pc, #24]	; (80003e4 <GPIO_set_out_pin+0xc4>)
 80003ca:	f000 fc7f 	bl	8000ccc <puts>
		break;
 80003ce:	bf00      	nop
	}
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010800 	.word	0x40010800
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	40011000 	.word	0x40011000
 80003e4:	08001420 	.word	0x08001420

080003e8 <main>:
#include "test_img.h"

#define TEST	1
uint8_t data[LCD_BUF_SIZE];

int main(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
	SysClockConfig();
 80003ee:	f000 f827 	bl	8000440 <SysClockConfig>

	SPI1_pin_init();
 80003f2:	f000 f9a2 	bl	800073a <SPI1_pin_init>
	SPI1_master_config();
 80003f6:	f000 f9cd 	bl	8000794 <SPI1_master_config>
	SPI1_enable();
 80003fa:	f000 f9bd 	bl	8000778 <SPI1_enable>
	Timer2Config();
 80003fe:	f000 fae1 	bl	80009c4 <Timer2Config>

	LCD_init();
 8000402:	f000 f918 	bl	8000636 <LCD_init>
//	GPIO_Pin_Configure(LED, OUTPUT_10MHZ, OUTPUT_GP_OD);
	LCD_enable();
 8000406:	f000 f92f 	bl	8000668 <LCD_enable>

	if(TEST){
//		int x,y;
//		y = 0;
//		x = 0;
		for (int i = 0; i < LCD_BUF_SIZE; i++){
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	e007      	b.n	8000420 <main+0x38>
			data[i] = 0x0f;
 8000410:	4a0a      	ldr	r2, [pc, #40]	; (800043c <main+0x54>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	220f      	movs	r2, #15
 8000418:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < LCD_BUF_SIZE; i++){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	3301      	adds	r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8000426:	dbf3      	blt.n	8000410 <main+0x28>
//			LCD_get_char8x8(x, y, data, i + 32);
//			LCD_send_image(data);
//			LCD_display();
//			Delay_ms(500);
//		}
		LCD_send_image(data);
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <main+0x54>)
 800042a:	f000 f946 	bl	80006ba <LCD_send_image>
//		LCD_send_image(data);
	}

	while(1){
//		GPIO_toogle_out_pin(LED);
		LCD_display();
 800042e:	f000 f8fc 	bl	800062a <LCD_display>
		Delay_ms(500);
 8000432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000436:	f000 fb03 	bl	8000a40 <Delay_ms>
		LCD_display();
 800043a:	e7f8      	b.n	800042e <main+0x46>
 800043c:	20000078 	.word	0x20000078

08000440 <SysClockConfig>:
  *            VDD(V)                         = 3.3
  *            Flash Latency(WS)              = 0
  * @param  None
  * @retval None
  */
void SysClockConfig(void){
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	 * 7.	Select the Clock Source and wait for it to be set.
	 ***********************************************************/

	/*1.ENABLE HSE and wait for HSE to become Ready*/
	/*Enable HSE*/
	RCC->CR |= RCC_CR_HSEON;
 8000444:	4b32      	ldr	r3, [pc, #200]	; (8000510 <SysClockConfig+0xd0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a31      	ldr	r2, [pc, #196]	; (8000510 <SysClockConfig+0xd0>)
 800044a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800044e:	6013      	str	r3, [r2, #0]

	/*Wait for HSE to become ready*/
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000450:	bf00      	nop
 8000452:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <SysClockConfig+0xd0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <SysClockConfig+0x12>

	/*2.Set the POWER ENABLE CLOCK*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800045e:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <SysClockConfig+0xd0>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a2b      	ldr	r2, [pc, #172]	; (8000510 <SysClockConfig+0xd0>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]

	/*3.Configure the FLASH PREFETCH and the LATENCY Related Setting*/
	/*Enable the flash prefetch*/
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <SysClockConfig+0xd4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a29      	ldr	r2, [pc, #164]	; (8000514 <SysClockConfig+0xd4>)
 8000470:	f043 0310 	orr.w	r3, r3, #16
 8000474:	6013      	str	r3, [r2, #0]

	/*Wait for flash prefetch to become enable*/
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 8000476:	bf00      	nop
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <SysClockConfig+0xd4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f003 0320 	and.w	r3, r3, #32
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <SysClockConfig+0x38>

	/*Set the flash latency*/
	FLASH->ACR |= FLASH_ACR_LATENCY_0;
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <SysClockConfig+0xd4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a22      	ldr	r2, [pc, #136]	; (8000514 <SysClockConfig+0xd4>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6013      	str	r3, [r2, #0]

	/*4.Configure the PRESCALERS HCLK, PCLK1, PCLK2*/
	/*Set the AHB prescaler*/
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <SysClockConfig+0xd0>)
 8000492:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <SysClockConfig+0xd0>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	6053      	str	r3, [r2, #4]

	/*Set the AHB1 prescaler*/
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <SysClockConfig+0xd0>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <SysClockConfig+0xd0>)
 800049e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004a2:	6053      	str	r3, [r2, #4]

	/*Set the AHB2 prescaler*/
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <SysClockConfig+0xd0>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	4a19      	ldr	r2, [pc, #100]	; (8000510 <SysClockConfig+0xd0>)
 80004aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ae:	6053      	str	r3, [r2, #4]

	/*5.Configure the MAIN PLL*/
	/*Set the PLL multiplication factor*/
	RCC->CFGR |= RCC_CFGR_PLLMULL_1;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <SysClockConfig+0xd0>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	4a16      	ldr	r2, [pc, #88]	; (8000510 <SysClockConfig+0xd0>)
 80004b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ba:	6053      	str	r3, [r2, #4]

	/*Select PLL entry clock source*/
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <SysClockConfig+0xd0>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4a13      	ldr	r2, [pc, #76]	; (8000510 <SysClockConfig+0xd0>)
 80004c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c6:	6053      	str	r3, [r2, #4]

	/*Select HSE divider for PLL entry*/
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <SysClockConfig+0xd0>)
 80004ca:	4a11      	ldr	r2, [pc, #68]	; (8000510 <SysClockConfig+0xd0>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	6053      	str	r3, [r2, #4]

	/*6.Enable the PLL and wait for it to become ready*/
	/*Enable PLL*/
	RCC->CR |= RCC_CR_PLLON;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <SysClockConfig+0xd0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <SysClockConfig+0xd0>)
 80004d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004da:	6013      	str	r3, [r2, #0]

	/*Wait for PLL to become ready*/
	while (!(RCC->CR & RCC_CR_PLLRDY));
 80004dc:	bf00      	nop
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <SysClockConfig+0xd0>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f9      	beq.n	80004de <SysClockConfig+0x9e>

	/*7.Select the Clock Source and wait for it to be set*/
	/*Select the Clock Source*/
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <SysClockConfig+0xd0>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <SysClockConfig+0xd0>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	6053      	str	r3, [r2, #4]

	/*Wait or clock source setting completely*/
	while (!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80004f6:	bf00      	nop
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <SysClockConfig+0xd0>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f003 0308 	and.w	r3, r3, #8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0f9      	beq.n	80004f8 <SysClockConfig+0xb8>
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	40022000 	.word	0x40022000

08000518 <Toggle_VCOM>:
#include "sharp96.h"

static uint8_t VCom;

static uint8_t Toggle_VCOM(void){
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	VCom ^= LCD_VCOM;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <Toggle_VCOM+0x20>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <Toggle_VCOM+0x20>)
 8000528:	701a      	strb	r2, [r3, #0]
	return VCom;
 800052a:	4b03      	ldr	r3, [pc, #12]	; (8000538 <Toggle_VCOM+0x20>)
 800052c:	781b      	ldrb	r3, [r3, #0]
}
 800052e:	4618      	mov	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	200004f8 	.word	0x200004f8

0800053c <LCD_send_byte>:

static void LCD_send_byte(uint8_t data){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	SPI1_transmit_data(&data, 1);
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f968 	bl	8000820 <SPI1_transmit_data>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <LCD_send_cmd>:

static void LCD_send_cmd(uint8_t cmd){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	cmd |= Toggle_VCOM();
 8000562:	f7ff ffd9 	bl	8000518 <Toggle_VCOM>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	4313      	orrs	r3, r2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	71fb      	strb	r3, [r7, #7]
	SPI1_transmit_data(&cmd, 1);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	2101      	movs	r1, #1
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f952 	bl	8000820 <SPI1_transmit_data>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <Reverse_data>:

static uint8_t Reverse_data(uint8_t data){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	data = ((data & 0x80) >> 7) | ((data & 0x40) >> 5) | ((data & 0x20) >> 3) | ((data & 0x10) >> 1)
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	09db      	lsrs	r3, r3, #7
 8000592:	b2db      	uxtb	r3, r3
 8000594:	b25a      	sxtb	r2, r3
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	115b      	asrs	r3, r3, #5
 800059a:	b25b      	sxtb	r3, r3
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	10db      	asrs	r3, r3, #3
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	105b      	asrs	r3, r3, #1
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b25a      	sxtb	r2, r3
			| ((data & 0x01) << 7) | ((data & 0x02) << 5) | ((data & 0x04) << 3) | ((data & 0x08) << 1);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	01db      	lsls	r3, r3, #7
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b25a      	sxtb	r2, r3
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	015b      	lsls	r3, r3, #5
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25a      	sxtb	r2, r3
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b25a      	sxtb	r2, r3
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	f003 0310 	and.w	r3, r3, #16
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b25b      	sxtb	r3, r3
	data = ((data & 0x80) >> 7) | ((data & 0x40) >> 5) | ((data & 0x20) >> 3) | ((data & 0x10) >> 1)
 8000600:	71fb      	strb	r3, [r7, #7]
	return data;
 8000602:	79fb      	ldrb	r3, [r7, #7]
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <LCD_send_toggle_VCOM>:
void LCD_send_toggle_VCOM(void){
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	LCD_transmit_begin();
 8000612:	f000 f832 	bl	800067a <LCD_transmit_begin>
	LCD_send_cmd(LCD_CM_DISPLAY);
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ff9e 	bl	8000558 <LCD_send_cmd>
	LCD_send_byte(LCD_TRAILER_BYTE);
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff ff8d 	bl	800053c <LCD_send_byte>
	LCD_transmit_cmplt();
 8000622:	f000 f833 	bl	800068c <LCD_transmit_cmplt>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <LCD_display>:

void LCD_display(void){
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
	LCD_send_toggle_VCOM();
 800062e:	f7ff ffee 	bl	800060e <LCD_send_toggle_VCOM>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}

08000636 <LCD_init>:

void LCD_init(void){
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
	/*Configure LCD_EN and LCD_CS pins to output mode*/
	GPIO_Pin_Configure(LCD_EN, OUTPUT_10MHZ, OUTPUT_GP_PP);
 800063a:	2300      	movs	r3, #0
 800063c:	2201      	movs	r2, #1
 800063e:	2100      	movs	r1, #0
 8000640:	2004      	movs	r0, #4
 8000642:	f7ff fd95 	bl	8000170 <GPIO_Pin_Configure>
	GPIO_Pin_Configure(LCD_CS, OUTPUT_10MHZ, OUTPUT_GP_PP);
 8000646:	2300      	movs	r3, #0
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	2004      	movs	r0, #4
 800064e:	f7ff fd8f 	bl	8000170 <GPIO_Pin_Configure>
	GPIO_set_out_pin(LCD_CS, LOW);
 8000652:	2200      	movs	r2, #0
 8000654:	2101      	movs	r1, #1
 8000656:	2004      	movs	r0, #4
 8000658:	f7ff fe62 	bl	8000320 <GPIO_set_out_pin>

	/*Enable LCD*/
	LCD_enable();
 800065c:	f000 f804 	bl	8000668 <LCD_enable>

	/*Clear screen*/
	LCD_clear_screen();
 8000660:	f000 f81d 	bl	800069e <LCD_clear_screen>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <LCD_enable>:

void LCD_enable(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	/*Enable LCD by setting LCD_EN pin to HIGH*/
	GPIO_set_out_pin(LCD_EN, HIGH);
 800066c:	2201      	movs	r2, #1
 800066e:	2100      	movs	r1, #0
 8000670:	2004      	movs	r0, #4
 8000672:	f7ff fe55 	bl	8000320 <GPIO_set_out_pin>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}

0800067a <LCD_transmit_begin>:
void LCD_disable(void){
	/*Disable LCD by setting LCD_EN pin to LOW*/
	GPIO_set_out_pin(LCD_EN, LOW);
}

void LCD_transmit_begin(void){
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
	GPIO_set_out_pin(LCD_CS, HIGH);
 800067e:	2201      	movs	r2, #1
 8000680:	2101      	movs	r1, #1
 8000682:	2004      	movs	r0, #4
 8000684:	f7ff fe4c 	bl	8000320 <GPIO_set_out_pin>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <LCD_transmit_cmplt>:

void LCD_transmit_cmplt(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	GPIO_set_out_pin(LCD_CS, LOW);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	2004      	movs	r0, #4
 8000696:	f7ff fe43 	bl	8000320 <GPIO_set_out_pin>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <LCD_clear_screen>:

void LCD_clear_screen(void){
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
	LCD_transmit_begin();
 80006a2:	f7ff ffea 	bl	800067a <LCD_transmit_begin>

	LCD_send_cmd(LCD_CM_CL);
 80006a6:	2020      	movs	r0, #32
 80006a8:	f7ff ff56 	bl	8000558 <LCD_send_cmd>
	LCD_send_byte(LCD_TRAILER_BYTE);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ff45 	bl	800053c <LCD_send_byte>

	LCD_transmit_cmplt();
 80006b2:	f7ff ffeb 	bl	800068c <LCD_transmit_cmplt>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}

080006ba <LCD_send_image>:

void LCD_send_image(uint8_t data[LCD_BUF_SIZE]){
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
	LCD_transmit_begin();
 80006c2:	f7ff ffda 	bl	800067a <LCD_transmit_begin>

	/*Send 1 byte for write command*/
	LCD_send_cmd(LCD_CM_WR);
 80006c6:	2080      	movs	r0, #128	; 0x80
 80006c8:	f7ff ff46 	bl	8000558 <LCD_send_cmd>


	for(uint8_t line = 0; line < LCD_VERTICAL_MAX; line++){
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e027      	b.n	8000722 <LCD_send_image+0x68>
		/*Send 1 byte for the line number*/
		LCD_send_byte(Reverse_data(line + 1));
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff53 	bl	8000584 <Reverse_data>
 80006de:	4603      	mov	r3, r0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff2b 	bl	800053c <LCD_send_byte>

		/*Send LCD_BYTES_LINE bytes data for 1 line*/
		for(int i = 0; i < LCD_BYTES_LINE; i++){
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	e011      	b.n	8000710 <LCD_send_image+0x56>
			LCD_send_byte(data[line * LCD_BYTES_LINE + i]);
 80006ec:	7bfa      	ldrb	r2, [r7, #15]
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	461a      	mov	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4413      	add	r3, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff19 	bl	800053c <LCD_send_byte>
		for(int i = 0; i < LCD_BYTES_LINE; i++){
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	3301      	adds	r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	2b0b      	cmp	r3, #11
 8000714:	ddea      	ble.n	80006ec <LCD_send_image+0x32>
		}

		/*Send 1 trailer byte to finish 1 line*/
		LCD_send_byte(LCD_TRAILER_BYTE);
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff ff10 	bl	800053c <LCD_send_byte>
	for(uint8_t line = 0; line < LCD_VERTICAL_MAX; line++){
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3301      	adds	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b5f      	cmp	r3, #95	; 0x5f
 8000726:	d9d4      	bls.n	80006d2 <LCD_send_image+0x18>
	}
	/*Send another trailer byte to complete the process*/
	LCD_send_byte(LCD_TRAILER_BYTE);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff07 	bl	800053c <LCD_send_byte>

	LCD_transmit_cmplt();
 800072e:	f7ff ffad 	bl	800068c <LCD_transmit_cmplt>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <SPI1_pin_init>:
#include "spi.h"

void SPI1_pin_init(void){
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
	/*Configure SPI1 pin to alternative mode*/
	GPIO_Pin_Configure(SPI1_MOSI, OUTPUT_10MHZ, OUTPUT_AF_PP);
 800073e:	2308      	movs	r3, #8
 8000740:	2201      	movs	r2, #1
 8000742:	2107      	movs	r1, #7
 8000744:	2004      	movs	r0, #4
 8000746:	f7ff fd13 	bl	8000170 <GPIO_Pin_Configure>
	GPIO_Pin_Configure(SPI1_SCK, OUTPUT_10MHZ, OUTPUT_AF_PP);
 800074a:	2308      	movs	r3, #8
 800074c:	2201      	movs	r2, #1
 800074e:	2105      	movs	r1, #5
 8000750:	2004      	movs	r0, #4
 8000752:	f7ff fd0d 	bl	8000170 <GPIO_Pin_Configure>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <SPI1_set_MSB>:
void SPI1_set_LSB(void){
	SPI1->CR1 |= SPI_CR1_LSBFIRST;
}

void SPI1_set_MSB(void){
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	SPI1->CR1 &= ~SPI_CR1_LSBFIRST;
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SPI1_set_MSB+0x18>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <SPI1_set_MSB+0x18>)
 8000766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40013000 	.word	0x40013000

08000778 <SPI1_enable>:

void SPI1_enable(void){
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	SPI1->CR1 |= SPI_CR1_SPE;
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SPI1_enable+0x18>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <SPI1_enable+0x18>)
 8000782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40013000 	.word	0x40013000

08000794 <SPI1_master_config>:

void SPI1_disable(void){
	SPI1->CR1 &= ~SPI_CR1_SPE;

}
void SPI1_master_config(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	 * 3. Configure the Control Register 2 (CR2).
	 * 4. Reset the SPI data register.
	 ***********************************************************/

	/*1.Enable clock to access SPI by setting SPI1EN in RCC_APB2ENR register*/
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SPI1_master_config+0x84>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <SPI1_master_config+0x84>)
 800079e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007a2:	6193      	str	r3, [r2, #24]

	/*2.Configure the Control Register 1 (CR1)*/
	/*2.1.Select the serial clock baud rate by setting the BR[2:0] bits in SPI_CR1 register*/
	/*011: fPCLK/8*/
	SPI1->CR1 &= ~(SPI_CR1_BR_2);
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <SPI1_master_config+0x88>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1c      	ldr	r2, [pc, #112]	; (800081c <SPI1_master_config+0x88>)
 80007aa:	f023 0320 	bic.w	r3, r3, #32
 80007ae:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1 ;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <SPI1_master_config+0x88>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <SPI1_master_config+0x88>)
 80007b6:	f043 0318 	orr.w	r3, r3, #24
 80007ba:	6013      	str	r3, [r2, #0]

	/*2.2.Select relationships between the data transfer and the serial clock by setting CPOL, CPHA bits in SPI_CR1 register*/
	SPI1->CR1 &= ~SPI_CR1_CPOL;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <SPI1_master_config+0x88>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <SPI1_master_config+0x88>)
 80007c2:	f023 0302 	bic.w	r3, r3, #2
 80007c6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~SPI_CR1_CPHA;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <SPI1_master_config+0x88>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a13      	ldr	r2, [pc, #76]	; (800081c <SPI1_master_config+0x88>)
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]

	/*2.3.Select 8-bit data frame format by setting DFF bit in SPI_CR1 register*/
	SPI1->CR1 &= ~SPI_CR1_DFF;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <SPI1_master_config+0x88>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <SPI1_master_config+0x88>)
 80007da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007de:	6013      	str	r3, [r2, #0]

	/*2.4.Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format*/
	SPI1_set_MSB();
 80007e0:	f7ff ffbc 	bl	800075c <SPI1_set_MSB>

	/*2.5.Select the master mode for mcu by setting MSTR bit SPI_CR1 register*/
	SPI1->CR1 |= SPI_CR1_MSTR;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <SPI1_master_config+0x88>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <SPI1_master_config+0x88>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6013      	str	r3, [r2, #0]

	/*2.6.Set SSM and SSI if select software slave management*/
	SPI1->CR1 |= SPI_CR1_SSM;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <SPI1_master_config+0x88>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a09      	ldr	r2, [pc, #36]	; (800081c <SPI1_master_config+0x88>)
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <SPI1_master_config+0x88>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <SPI1_master_config+0x88>)
 8000802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000806:	6013      	str	r3, [r2, #0]

	/*3.Configure the Control Register 2 (CR2)*/
	SPI1->CR2 = 0;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <SPI1_master_config+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]

	/*4.Reset the SPI data register.*/
	SPI1->DR = 0;
 800080e:	4b03      	ldr	r3, [pc, #12]	; (800081c <SPI1_master_config+0x88>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	40013000 	.word	0x40013000

08000820 <SPI1_transmit_data>:

void SPI1_transmit_data(uint8_t *data, uint8_t size){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	 * 2. Write the data to the Data Register.
	 * 3. Wait for the BSY bit to reset in Status Register.
	 * 4. Clear the Overrun flag by reading DR and SR.
	************************************************/

	for(int i = 0; i < size; i++){
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e00f      	b.n	8000852 <SPI1_transmit_data+0x32>
		/*1.Wait for the TXE bit to set in the Status Register*/
		while(!((SPI1->SR & SPI_SR_TXE) == SPI_SR_TXE)){}
 8000832:	bf00      	nop
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <SPI1_transmit_data+0x60>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	2b02      	cmp	r3, #2
 800083e:	d1f9      	bne.n	8000834 <SPI1_transmit_data+0x14>

		/*2.Write the data to the Data Register*/
		SPI1->DR = *(data + i);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <SPI1_transmit_data+0x60>)
 800084a:	60da      	str	r2, [r3, #12]
	for(int i = 0; i < size; i++){
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	429a      	cmp	r2, r3
 8000858:	dbeb      	blt.n	8000832 <SPI1_transmit_data+0x12>
	}

	/*3.Wait for the BSY bit to reset in Status Register*/
	while(((SPI1->SR & SPI_SR_BSY) == SPI_SR_BSY)){}
 800085a:	bf00      	nop
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <SPI1_transmit_data+0x60>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000864:	2b80      	cmp	r3, #128	; 0x80
 8000866:	d0f9      	beq.n	800085c <SPI1_transmit_data+0x3c>

	/*4.Clear the Overrun flag by reading DR and SR*/
	uint8_t temp = SPI1->DR;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SPI1_transmit_data+0x60>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	72fb      	strb	r3, [r7, #11]
	temp = SPI1->SR;
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SPI1_transmit_data+0x60>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	72fb      	strb	r3, [r7, #11]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40013000 	.word	0x40013000

08000884 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e00a      	b.n	80008ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000896:	f3af 8000 	nop.w
 800089a:	4601      	mov	r1, r0
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	b2ca      	uxtb	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbf0      	blt.n	8000896 <_read+0x12>
  }

  return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e009      	b.n	80008e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf1      	blt.n	80008d0 <_write+0x12>
  }
  return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_close>:

int _close(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091c:	605a      	str	r2, [r3, #4]
  return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_isatty>:

int _isatty(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
	...

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f000 face 	bl	8000f28 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20005000 	.word	0x20005000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200004fc 	.word	0x200004fc
 80009c0:	20000650 	.word	0x20000650

080009c4 <Timer2Config>:
	/*Wait for the update flag to set*/
	while(!(TIM3->SR & TIM_SR_UIF));
}

/*Timer 2 is using to calculate time*/
void Timer2Config(void){
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	* 2. Set the prescaler and the ARR.
	* 3. Enable the Timer, and wait for the update Flag to set.
	 ***********************************************************/

	/*1.Enable Timer 2 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <Timer2Config+0x4c>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <Timer2Config+0x4c>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	61d3      	str	r3, [r2, #28]

	/*2.Set the prescaler and the ARR*/
	/*Set TIM prescaler*/
	TIM2->PSC = 8-1;	//Each count by the counter take 1 microseccond
 80009d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d8:	2207      	movs	r2, #7
 80009da:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set TIM Auto-reload value*/
	TIM2->ARR = 0xffff-1;	//ARR resister is 16 bit resister
 80009dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c

	/*3.Enable the Timer, and wait for the update Flag to set*/
	/*Enable timer*/
	TIM2->CR1 |= TIM_CR1_CEN;
 80009e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6013      	str	r3, [r2, #0]

	/*Wait for the update flag to set*/
	while(!(TIM2->SR & TIM_SR_UIF));
 80009f6:	bf00      	nop
 80009f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f8      	beq.n	80009f8 <Timer2Config+0x34>
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <Delay_us>:

void Delay_us (uint16_t us){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
	 * 1. RESET the Counter
	 * 2. Wait for the Counter to reach the entered value. As each count will take 1 us,
		 the total waiting time will be the required us delay
	 ***********************************************************/
	/*Reset counter*/
	TIM2->CNT = 0;
 8000a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24

	/*Wait for the counter to reach the entered value*/
	while (TIM2->CNT < us);
 8000a26:	bf00      	nop
 8000a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3f9      	bcc.n	8000a28 <Delay_us+0x14>

}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Delay_ms>:
void Delay_ms (uint16_t ms){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	81fb      	strh	r3, [r7, #14]
 8000a4e:	e006      	b.n	8000a5e <Delay_ms+0x1e>
		Delay_us(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f7ff ffde 	bl	8000a14 <Delay_us>
	for(uint16_t i = 0; i < ms; i++){
 8000a58:	89fb      	ldrh	r3, [r7, #14]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	81fb      	strh	r3, [r7, #14]
 8000a5e:	89fa      	ldrh	r2, [r7, #14]
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3f4      	bcc.n	8000a50 <Delay_ms+0x10>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a9e:	f000 fa49 	bl	8000f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff fca1 	bl	80003e8 <main>

08000aa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ab4:	0800146c 	.word	0x0800146c
  ldr r2, =_sbss
 8000ab8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000abc:	2000064c 	.word	0x2000064c

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>
	...

08000ac4 <std>:
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	4604      	mov	r4, r0
 8000aca:	e9c0 3300 	strd	r3, r3, [r0]
 8000ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ad2:	6083      	str	r3, [r0, #8]
 8000ad4:	8181      	strh	r1, [r0, #12]
 8000ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8000ad8:	81c2      	strh	r2, [r0, #14]
 8000ada:	6183      	str	r3, [r0, #24]
 8000adc:	4619      	mov	r1, r3
 8000ade:	2208      	movs	r2, #8
 8000ae0:	305c      	adds	r0, #92	; 0x5c
 8000ae2:	f000 f9d3 	bl	8000e8c <memset>
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <std+0x38>)
 8000ae8:	6224      	str	r4, [r4, #32]
 8000aea:	6263      	str	r3, [r4, #36]	; 0x24
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <std+0x3c>)
 8000aee:	62a3      	str	r3, [r4, #40]	; 0x28
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <std+0x40>)
 8000af2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <std+0x44>)
 8000af6:	6323      	str	r3, [r4, #48]	; 0x30
 8000af8:	bd10      	pop	{r4, pc}
 8000afa:	bf00      	nop
 8000afc:	08000cdd 	.word	0x08000cdd
 8000b00:	08000cff 	.word	0x08000cff
 8000b04:	08000d37 	.word	0x08000d37
 8000b08:	08000d5b 	.word	0x08000d5b

08000b0c <stdio_exit_handler>:
 8000b0c:	4a02      	ldr	r2, [pc, #8]	; (8000b18 <stdio_exit_handler+0xc>)
 8000b0e:	4903      	ldr	r1, [pc, #12]	; (8000b1c <stdio_exit_handler+0x10>)
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <stdio_exit_handler+0x14>)
 8000b12:	f000 b869 	b.w	8000be8 <_fwalk_sglue>
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	0800126d 	.word	0x0800126d
 8000b20:	2000000c 	.word	0x2000000c

08000b24 <cleanup_stdio>:
 8000b24:	6841      	ldr	r1, [r0, #4]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <cleanup_stdio+0x34>)
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	d001      	beq.n	8000b34 <cleanup_stdio+0x10>
 8000b30:	f000 fb9c 	bl	800126c <_fflush_r>
 8000b34:	68a1      	ldr	r1, [r4, #8]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <cleanup_stdio+0x38>)
 8000b38:	4299      	cmp	r1, r3
 8000b3a:	d002      	beq.n	8000b42 <cleanup_stdio+0x1e>
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f000 fb95 	bl	800126c <_fflush_r>
 8000b42:	68e1      	ldr	r1, [r4, #12]
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <cleanup_stdio+0x3c>)
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d004      	beq.n	8000b54 <cleanup_stdio+0x30>
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b50:	f000 bb8c 	b.w	800126c <_fflush_r>
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	bf00      	nop
 8000b58:	20000500 	.word	0x20000500
 8000b5c:	20000568 	.word	0x20000568
 8000b60:	200005d0 	.word	0x200005d0

08000b64 <global_stdio_init.part.0>:
 8000b64:	b510      	push	{r4, lr}
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <global_stdio_init.part.0+0x30>)
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <global_stdio_init.part.0+0x34>)
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <global_stdio_init.part.0+0x38>)
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	2104      	movs	r1, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	f7ff ffa6 	bl	8000ac4 <std>
 8000b78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2109      	movs	r1, #9
 8000b80:	f7ff ffa0 	bl	8000ac4 <std>
 8000b84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000b88:	2202      	movs	r2, #2
 8000b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b8e:	2112      	movs	r1, #18
 8000b90:	f7ff bf98 	b.w	8000ac4 <std>
 8000b94:	20000638 	.word	0x20000638
 8000b98:	20000500 	.word	0x20000500
 8000b9c:	08000b0d 	.word	0x08000b0d

08000ba0 <__sfp_lock_acquire>:
 8000ba0:	4801      	ldr	r0, [pc, #4]	; (8000ba8 <__sfp_lock_acquire+0x8>)
 8000ba2:	f000 b9eb 	b.w	8000f7c <__retarget_lock_acquire_recursive>
 8000ba6:	bf00      	nop
 8000ba8:	20000641 	.word	0x20000641

08000bac <__sfp_lock_release>:
 8000bac:	4801      	ldr	r0, [pc, #4]	; (8000bb4 <__sfp_lock_release+0x8>)
 8000bae:	f000 b9e6 	b.w	8000f7e <__retarget_lock_release_recursive>
 8000bb2:	bf00      	nop
 8000bb4:	20000641 	.word	0x20000641

08000bb8 <__sinit>:
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	4604      	mov	r4, r0
 8000bbc:	f7ff fff0 	bl	8000ba0 <__sfp_lock_acquire>
 8000bc0:	6a23      	ldr	r3, [r4, #32]
 8000bc2:	b11b      	cbz	r3, 8000bcc <__sinit+0x14>
 8000bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc8:	f7ff bff0 	b.w	8000bac <__sfp_lock_release>
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__sinit+0x28>)
 8000bce:	6223      	str	r3, [r4, #32]
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__sinit+0x2c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f5      	bne.n	8000bc4 <__sinit+0xc>
 8000bd8:	f7ff ffc4 	bl	8000b64 <global_stdio_init.part.0>
 8000bdc:	e7f2      	b.n	8000bc4 <__sinit+0xc>
 8000bde:	bf00      	nop
 8000be0:	08000b25 	.word	0x08000b25
 8000be4:	20000638 	.word	0x20000638

08000be8 <_fwalk_sglue>:
 8000be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bec:	4607      	mov	r7, r0
 8000bee:	4688      	mov	r8, r1
 8000bf0:	4614      	mov	r4, r2
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8000bfc:	d505      	bpl.n	8000c0a <_fwalk_sglue+0x22>
 8000bfe:	6824      	ldr	r4, [r4, #0]
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d1f7      	bne.n	8000bf4 <_fwalk_sglue+0xc>
 8000c04:	4630      	mov	r0, r6
 8000c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c0a:	89ab      	ldrh	r3, [r5, #12]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d907      	bls.n	8000c20 <_fwalk_sglue+0x38>
 8000c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c14:	3301      	adds	r3, #1
 8000c16:	d003      	beq.n	8000c20 <_fwalk_sglue+0x38>
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4638      	mov	r0, r7
 8000c1c:	47c0      	blx	r8
 8000c1e:	4306      	orrs	r6, r0
 8000c20:	3568      	adds	r5, #104	; 0x68
 8000c22:	e7e9      	b.n	8000bf8 <_fwalk_sglue+0x10>

08000c24 <_puts_r>:
 8000c24:	6a03      	ldr	r3, [r0, #32]
 8000c26:	b570      	push	{r4, r5, r6, lr}
 8000c28:	4605      	mov	r5, r0
 8000c2a:	460e      	mov	r6, r1
 8000c2c:	6884      	ldr	r4, [r0, #8]
 8000c2e:	b90b      	cbnz	r3, 8000c34 <_puts_r+0x10>
 8000c30:	f7ff ffc2 	bl	8000bb8 <__sinit>
 8000c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c36:	07db      	lsls	r3, r3, #31
 8000c38:	d405      	bmi.n	8000c46 <_puts_r+0x22>
 8000c3a:	89a3      	ldrh	r3, [r4, #12]
 8000c3c:	0598      	lsls	r0, r3, #22
 8000c3e:	d402      	bmi.n	8000c46 <_puts_r+0x22>
 8000c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c42:	f000 f99b 	bl	8000f7c <__retarget_lock_acquire_recursive>
 8000c46:	89a3      	ldrh	r3, [r4, #12]
 8000c48:	0719      	lsls	r1, r3, #28
 8000c4a:	d513      	bpl.n	8000c74 <_puts_r+0x50>
 8000c4c:	6923      	ldr	r3, [r4, #16]
 8000c4e:	b18b      	cbz	r3, 8000c74 <_puts_r+0x50>
 8000c50:	3e01      	subs	r6, #1
 8000c52:	68a3      	ldr	r3, [r4, #8]
 8000c54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	60a3      	str	r3, [r4, #8]
 8000c5c:	b9e9      	cbnz	r1, 8000c9a <_puts_r+0x76>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	da2e      	bge.n	8000cc0 <_puts_r+0x9c>
 8000c62:	4622      	mov	r2, r4
 8000c64:	210a      	movs	r1, #10
 8000c66:	4628      	mov	r0, r5
 8000c68:	f000 f87b 	bl	8000d62 <__swbuf_r>
 8000c6c:	3001      	adds	r0, #1
 8000c6e:	d007      	beq.n	8000c80 <_puts_r+0x5c>
 8000c70:	250a      	movs	r5, #10
 8000c72:	e007      	b.n	8000c84 <_puts_r+0x60>
 8000c74:	4621      	mov	r1, r4
 8000c76:	4628      	mov	r0, r5
 8000c78:	f000 f8b0 	bl	8000ddc <__swsetup_r>
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d0e7      	beq.n	8000c50 <_puts_r+0x2c>
 8000c80:	f04f 35ff 	mov.w	r5, #4294967295
 8000c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c86:	07da      	lsls	r2, r3, #31
 8000c88:	d405      	bmi.n	8000c96 <_puts_r+0x72>
 8000c8a:	89a3      	ldrh	r3, [r4, #12]
 8000c8c:	059b      	lsls	r3, r3, #22
 8000c8e:	d402      	bmi.n	8000c96 <_puts_r+0x72>
 8000c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c92:	f000 f974 	bl	8000f7e <__retarget_lock_release_recursive>
 8000c96:	4628      	mov	r0, r5
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da04      	bge.n	8000ca8 <_puts_r+0x84>
 8000c9e:	69a2      	ldr	r2, [r4, #24]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dc06      	bgt.n	8000cb2 <_puts_r+0x8e>
 8000ca4:	290a      	cmp	r1, #10
 8000ca6:	d004      	beq.n	8000cb2 <_puts_r+0x8e>
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	6022      	str	r2, [r4, #0]
 8000cae:	7019      	strb	r1, [r3, #0]
 8000cb0:	e7cf      	b.n	8000c52 <_puts_r+0x2e>
 8000cb2:	4622      	mov	r2, r4
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f000 f854 	bl	8000d62 <__swbuf_r>
 8000cba:	3001      	adds	r0, #1
 8000cbc:	d1c9      	bne.n	8000c52 <_puts_r+0x2e>
 8000cbe:	e7df      	b.n	8000c80 <_puts_r+0x5c>
 8000cc0:	250a      	movs	r5, #10
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	6022      	str	r2, [r4, #0]
 8000cc8:	701d      	strb	r5, [r3, #0]
 8000cca:	e7db      	b.n	8000c84 <_puts_r+0x60>

08000ccc <puts>:
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <puts+0xc>)
 8000cce:	4601      	mov	r1, r0
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	f7ff bfa7 	b.w	8000c24 <_puts_r>
 8000cd6:	bf00      	nop
 8000cd8:	20000058 	.word	0x20000058

08000cdc <__sread>:
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	460c      	mov	r4, r1
 8000ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ce4:	f000 f8fc 	bl	8000ee0 <_read_r>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	bfab      	itete	ge
 8000cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000cee:	89a3      	ldrhlt	r3, [r4, #12]
 8000cf0:	181b      	addge	r3, r3, r0
 8000cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000cf6:	bfac      	ite	ge
 8000cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000cfa:	81a3      	strhlt	r3, [r4, #12]
 8000cfc:	bd10      	pop	{r4, pc}

08000cfe <__swrite>:
 8000cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d02:	461f      	mov	r7, r3
 8000d04:	898b      	ldrh	r3, [r1, #12]
 8000d06:	4605      	mov	r5, r0
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	460c      	mov	r4, r1
 8000d0c:	4616      	mov	r6, r2
 8000d0e:	d505      	bpl.n	8000d1c <__swrite+0x1e>
 8000d10:	2302      	movs	r3, #2
 8000d12:	2200      	movs	r2, #0
 8000d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d18:	f000 f8d0 	bl	8000ebc <_lseek_r>
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	4632      	mov	r2, r6
 8000d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d24:	81a3      	strh	r3, [r4, #12]
 8000d26:	4628      	mov	r0, r5
 8000d28:	463b      	mov	r3, r7
 8000d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d32:	f000 b8e7 	b.w	8000f04 <_write_r>

08000d36 <__sseek>:
 8000d36:	b510      	push	{r4, lr}
 8000d38:	460c      	mov	r4, r1
 8000d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d3e:	f000 f8bd 	bl	8000ebc <_lseek_r>
 8000d42:	1c43      	adds	r3, r0, #1
 8000d44:	89a3      	ldrh	r3, [r4, #12]
 8000d46:	bf15      	itete	ne
 8000d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d52:	81a3      	strheq	r3, [r4, #12]
 8000d54:	bf18      	it	ne
 8000d56:	81a3      	strhne	r3, [r4, #12]
 8000d58:	bd10      	pop	{r4, pc}

08000d5a <__sclose>:
 8000d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5e:	f000 b89d 	b.w	8000e9c <_close_r>

08000d62 <__swbuf_r>:
 8000d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d64:	460e      	mov	r6, r1
 8000d66:	4614      	mov	r4, r2
 8000d68:	4605      	mov	r5, r0
 8000d6a:	b118      	cbz	r0, 8000d74 <__swbuf_r+0x12>
 8000d6c:	6a03      	ldr	r3, [r0, #32]
 8000d6e:	b90b      	cbnz	r3, 8000d74 <__swbuf_r+0x12>
 8000d70:	f7ff ff22 	bl	8000bb8 <__sinit>
 8000d74:	69a3      	ldr	r3, [r4, #24]
 8000d76:	60a3      	str	r3, [r4, #8]
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	071a      	lsls	r2, r3, #28
 8000d7c:	d525      	bpl.n	8000dca <__swbuf_r+0x68>
 8000d7e:	6923      	ldr	r3, [r4, #16]
 8000d80:	b31b      	cbz	r3, 8000dca <__swbuf_r+0x68>
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	6922      	ldr	r2, [r4, #16]
 8000d86:	b2f6      	uxtb	r6, r6
 8000d88:	1a98      	subs	r0, r3, r2
 8000d8a:	6963      	ldr	r3, [r4, #20]
 8000d8c:	4637      	mov	r7, r6
 8000d8e:	4283      	cmp	r3, r0
 8000d90:	dc04      	bgt.n	8000d9c <__swbuf_r+0x3a>
 8000d92:	4621      	mov	r1, r4
 8000d94:	4628      	mov	r0, r5
 8000d96:	f000 fa69 	bl	800126c <_fflush_r>
 8000d9a:	b9e0      	cbnz	r0, 8000dd6 <__swbuf_r+0x74>
 8000d9c:	68a3      	ldr	r3, [r4, #8]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	60a3      	str	r3, [r4, #8]
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	6022      	str	r2, [r4, #0]
 8000da8:	701e      	strb	r6, [r3, #0]
 8000daa:	6962      	ldr	r2, [r4, #20]
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d004      	beq.n	8000dbc <__swbuf_r+0x5a>
 8000db2:	89a3      	ldrh	r3, [r4, #12]
 8000db4:	07db      	lsls	r3, r3, #31
 8000db6:	d506      	bpl.n	8000dc6 <__swbuf_r+0x64>
 8000db8:	2e0a      	cmp	r6, #10
 8000dba:	d104      	bne.n	8000dc6 <__swbuf_r+0x64>
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f000 fa54 	bl	800126c <_fflush_r>
 8000dc4:	b938      	cbnz	r0, 8000dd6 <__swbuf_r+0x74>
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dca:	4621      	mov	r1, r4
 8000dcc:	4628      	mov	r0, r5
 8000dce:	f000 f805 	bl	8000ddc <__swsetup_r>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d0d5      	beq.n	8000d82 <__swbuf_r+0x20>
 8000dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8000dda:	e7f4      	b.n	8000dc6 <__swbuf_r+0x64>

08000ddc <__swsetup_r>:
 8000ddc:	b538      	push	{r3, r4, r5, lr}
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <__swsetup_r+0xac>)
 8000de0:	4605      	mov	r5, r0
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	460c      	mov	r4, r1
 8000de6:	b118      	cbz	r0, 8000df0 <__swsetup_r+0x14>
 8000de8:	6a03      	ldr	r3, [r0, #32]
 8000dea:	b90b      	cbnz	r3, 8000df0 <__swsetup_r+0x14>
 8000dec:	f7ff fee4 	bl	8000bb8 <__sinit>
 8000df0:	89a3      	ldrh	r3, [r4, #12]
 8000df2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000df6:	0718      	lsls	r0, r3, #28
 8000df8:	d422      	bmi.n	8000e40 <__swsetup_r+0x64>
 8000dfa:	06d9      	lsls	r1, r3, #27
 8000dfc:	d407      	bmi.n	8000e0e <__swsetup_r+0x32>
 8000dfe:	2309      	movs	r3, #9
 8000e00:	602b      	str	r3, [r5, #0]
 8000e02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	81a3      	strh	r3, [r4, #12]
 8000e0c:	e034      	b.n	8000e78 <__swsetup_r+0x9c>
 8000e0e:	0758      	lsls	r0, r3, #29
 8000e10:	d512      	bpl.n	8000e38 <__swsetup_r+0x5c>
 8000e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e14:	b141      	cbz	r1, 8000e28 <__swsetup_r+0x4c>
 8000e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d002      	beq.n	8000e24 <__swsetup_r+0x48>
 8000e1e:	4628      	mov	r0, r5
 8000e20:	f000 f8ae 	bl	8000f80 <_free_r>
 8000e24:	2300      	movs	r3, #0
 8000e26:	6363      	str	r3, [r4, #52]	; 0x34
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e2e:	81a3      	strh	r3, [r4, #12]
 8000e30:	2300      	movs	r3, #0
 8000e32:	6063      	str	r3, [r4, #4]
 8000e34:	6923      	ldr	r3, [r4, #16]
 8000e36:	6023      	str	r3, [r4, #0]
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	81a3      	strh	r3, [r4, #12]
 8000e40:	6923      	ldr	r3, [r4, #16]
 8000e42:	b94b      	cbnz	r3, 8000e58 <__swsetup_r+0x7c>
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e4e:	d003      	beq.n	8000e58 <__swsetup_r+0x7c>
 8000e50:	4621      	mov	r1, r4
 8000e52:	4628      	mov	r0, r5
 8000e54:	f000 fa57 	bl	8001306 <__smakebuf_r>
 8000e58:	89a0      	ldrh	r0, [r4, #12]
 8000e5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e5e:	f010 0301 	ands.w	r3, r0, #1
 8000e62:	d00a      	beq.n	8000e7a <__swsetup_r+0x9e>
 8000e64:	2300      	movs	r3, #0
 8000e66:	60a3      	str	r3, [r4, #8]
 8000e68:	6963      	ldr	r3, [r4, #20]
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	61a3      	str	r3, [r4, #24]
 8000e6e:	6923      	ldr	r3, [r4, #16]
 8000e70:	b943      	cbnz	r3, 8000e84 <__swsetup_r+0xa8>
 8000e72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000e76:	d1c4      	bne.n	8000e02 <__swsetup_r+0x26>
 8000e78:	bd38      	pop	{r3, r4, r5, pc}
 8000e7a:	0781      	lsls	r1, r0, #30
 8000e7c:	bf58      	it	pl
 8000e7e:	6963      	ldrpl	r3, [r4, #20]
 8000e80:	60a3      	str	r3, [r4, #8]
 8000e82:	e7f4      	b.n	8000e6e <__swsetup_r+0x92>
 8000e84:	2000      	movs	r0, #0
 8000e86:	e7f7      	b.n	8000e78 <__swsetup_r+0x9c>
 8000e88:	20000058 	.word	0x20000058

08000e8c <memset>:
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4402      	add	r2, r0
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d100      	bne.n	8000e96 <memset+0xa>
 8000e94:	4770      	bx	lr
 8000e96:	f803 1b01 	strb.w	r1, [r3], #1
 8000e9a:	e7f9      	b.n	8000e90 <memset+0x4>

08000e9c <_close_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	4d05      	ldr	r5, [pc, #20]	; (8000eb8 <_close_r+0x1c>)
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	602b      	str	r3, [r5, #0]
 8000ea8:	f7ff fd25 	bl	80008f6 <_close>
 8000eac:	1c43      	adds	r3, r0, #1
 8000eae:	d102      	bne.n	8000eb6 <_close_r+0x1a>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	b103      	cbz	r3, 8000eb6 <_close_r+0x1a>
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
 8000eb8:	2000063c 	.word	0x2000063c

08000ebc <_lseek_r>:
 8000ebc:	b538      	push	{r3, r4, r5, lr}
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4d05      	ldr	r5, [pc, #20]	; (8000edc <_lseek_r+0x20>)
 8000ec8:	602a      	str	r2, [r5, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f7ff fd37 	bl	800093e <_lseek>
 8000ed0:	1c43      	adds	r3, r0, #1
 8000ed2:	d102      	bne.n	8000eda <_lseek_r+0x1e>
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	b103      	cbz	r3, 8000eda <_lseek_r+0x1e>
 8000ed8:	6023      	str	r3, [r4, #0]
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
 8000edc:	2000063c 	.word	0x2000063c

08000ee0 <_read_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4d05      	ldr	r5, [pc, #20]	; (8000f00 <_read_r+0x20>)
 8000eec:	602a      	str	r2, [r5, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f7ff fcc8 	bl	8000884 <_read>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	d102      	bne.n	8000efe <_read_r+0x1e>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	b103      	cbz	r3, 8000efe <_read_r+0x1e>
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	2000063c 	.word	0x2000063c

08000f04 <_write_r>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	4604      	mov	r4, r0
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4d05      	ldr	r5, [pc, #20]	; (8000f24 <_write_r+0x20>)
 8000f10:	602a      	str	r2, [r5, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f7ff fcd3 	bl	80008be <_write>
 8000f18:	1c43      	adds	r3, r0, #1
 8000f1a:	d102      	bne.n	8000f22 <_write_r+0x1e>
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	b103      	cbz	r3, 8000f22 <_write_r+0x1e>
 8000f20:	6023      	str	r3, [r4, #0]
 8000f22:	bd38      	pop	{r3, r4, r5, pc}
 8000f24:	2000063c 	.word	0x2000063c

08000f28 <__errno>:
 8000f28:	4b01      	ldr	r3, [pc, #4]	; (8000f30 <__errno+0x8>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000058 	.word	0x20000058

08000f34 <__libc_init_array>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	2600      	movs	r6, #0
 8000f38:	4d0c      	ldr	r5, [pc, #48]	; (8000f6c <__libc_init_array+0x38>)
 8000f3a:	4c0d      	ldr	r4, [pc, #52]	; (8000f70 <__libc_init_array+0x3c>)
 8000f3c:	1b64      	subs	r4, r4, r5
 8000f3e:	10a4      	asrs	r4, r4, #2
 8000f40:	42a6      	cmp	r6, r4
 8000f42:	d109      	bne.n	8000f58 <__libc_init_array+0x24>
 8000f44:	f000 fa4e 	bl	80013e4 <_init>
 8000f48:	2600      	movs	r6, #0
 8000f4a:	4d0a      	ldr	r5, [pc, #40]	; (8000f74 <__libc_init_array+0x40>)
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <__libc_init_array+0x44>)
 8000f4e:	1b64      	subs	r4, r4, r5
 8000f50:	10a4      	asrs	r4, r4, #2
 8000f52:	42a6      	cmp	r6, r4
 8000f54:	d105      	bne.n	8000f62 <__libc_init_array+0x2e>
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f5c:	4798      	blx	r3
 8000f5e:	3601      	adds	r6, #1
 8000f60:	e7ee      	b.n	8000f40 <__libc_init_array+0xc>
 8000f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f66:	4798      	blx	r3
 8000f68:	3601      	adds	r6, #1
 8000f6a:	e7f2      	b.n	8000f52 <__libc_init_array+0x1e>
 8000f6c:	08001464 	.word	0x08001464
 8000f70:	08001464 	.word	0x08001464
 8000f74:	08001464 	.word	0x08001464
 8000f78:	08001468 	.word	0x08001468

08000f7c <__retarget_lock_acquire_recursive>:
 8000f7c:	4770      	bx	lr

08000f7e <__retarget_lock_release_recursive>:
 8000f7e:	4770      	bx	lr

08000f80 <_free_r>:
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4605      	mov	r5, r0
 8000f84:	2900      	cmp	r1, #0
 8000f86:	d040      	beq.n	800100a <_free_r+0x8a>
 8000f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f8c:	1f0c      	subs	r4, r1, #4
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfb8      	it	lt
 8000f92:	18e4      	addlt	r4, r4, r3
 8000f94:	f000 f8dc 	bl	8001150 <__malloc_lock>
 8000f98:	4a1c      	ldr	r2, [pc, #112]	; (800100c <_free_r+0x8c>)
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	b933      	cbnz	r3, 8000fac <_free_r+0x2c>
 8000f9e:	6063      	str	r3, [r4, #4]
 8000fa0:	6014      	str	r4, [r2, #0]
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fa8:	f000 b8d8 	b.w	800115c <__malloc_unlock>
 8000fac:	42a3      	cmp	r3, r4
 8000fae:	d908      	bls.n	8000fc2 <_free_r+0x42>
 8000fb0:	6820      	ldr	r0, [r4, #0]
 8000fb2:	1821      	adds	r1, r4, r0
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf01      	itttt	eq
 8000fb8:	6819      	ldreq	r1, [r3, #0]
 8000fba:	685b      	ldreq	r3, [r3, #4]
 8000fbc:	1809      	addeq	r1, r1, r0
 8000fbe:	6021      	streq	r1, [r4, #0]
 8000fc0:	e7ed      	b.n	8000f9e <_free_r+0x1e>
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	b10b      	cbz	r3, 8000fcc <_free_r+0x4c>
 8000fc8:	42a3      	cmp	r3, r4
 8000fca:	d9fa      	bls.n	8000fc2 <_free_r+0x42>
 8000fcc:	6811      	ldr	r1, [r2, #0]
 8000fce:	1850      	adds	r0, r2, r1
 8000fd0:	42a0      	cmp	r0, r4
 8000fd2:	d10b      	bne.n	8000fec <_free_r+0x6c>
 8000fd4:	6820      	ldr	r0, [r4, #0]
 8000fd6:	4401      	add	r1, r0
 8000fd8:	1850      	adds	r0, r2, r1
 8000fda:	4283      	cmp	r3, r0
 8000fdc:	6011      	str	r1, [r2, #0]
 8000fde:	d1e0      	bne.n	8000fa2 <_free_r+0x22>
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4408      	add	r0, r1
 8000fe6:	6010      	str	r0, [r2, #0]
 8000fe8:	6053      	str	r3, [r2, #4]
 8000fea:	e7da      	b.n	8000fa2 <_free_r+0x22>
 8000fec:	d902      	bls.n	8000ff4 <_free_r+0x74>
 8000fee:	230c      	movs	r3, #12
 8000ff0:	602b      	str	r3, [r5, #0]
 8000ff2:	e7d6      	b.n	8000fa2 <_free_r+0x22>
 8000ff4:	6820      	ldr	r0, [r4, #0]
 8000ff6:	1821      	adds	r1, r4, r0
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	bf01      	itttt	eq
 8000ffc:	6819      	ldreq	r1, [r3, #0]
 8000ffe:	685b      	ldreq	r3, [r3, #4]
 8001000:	1809      	addeq	r1, r1, r0
 8001002:	6021      	streq	r1, [r4, #0]
 8001004:	6063      	str	r3, [r4, #4]
 8001006:	6054      	str	r4, [r2, #4]
 8001008:	e7cb      	b.n	8000fa2 <_free_r+0x22>
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	20000644 	.word	0x20000644

08001010 <sbrk_aligned>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	4e0e      	ldr	r6, [pc, #56]	; (800104c <sbrk_aligned+0x3c>)
 8001014:	460c      	mov	r4, r1
 8001016:	6831      	ldr	r1, [r6, #0]
 8001018:	4605      	mov	r5, r0
 800101a:	b911      	cbnz	r1, 8001022 <sbrk_aligned+0x12>
 800101c:	f000 f9d2 	bl	80013c4 <_sbrk_r>
 8001020:	6030      	str	r0, [r6, #0]
 8001022:	4621      	mov	r1, r4
 8001024:	4628      	mov	r0, r5
 8001026:	f000 f9cd 	bl	80013c4 <_sbrk_r>
 800102a:	1c43      	adds	r3, r0, #1
 800102c:	d00a      	beq.n	8001044 <sbrk_aligned+0x34>
 800102e:	1cc4      	adds	r4, r0, #3
 8001030:	f024 0403 	bic.w	r4, r4, #3
 8001034:	42a0      	cmp	r0, r4
 8001036:	d007      	beq.n	8001048 <sbrk_aligned+0x38>
 8001038:	1a21      	subs	r1, r4, r0
 800103a:	4628      	mov	r0, r5
 800103c:	f000 f9c2 	bl	80013c4 <_sbrk_r>
 8001040:	3001      	adds	r0, #1
 8001042:	d101      	bne.n	8001048 <sbrk_aligned+0x38>
 8001044:	f04f 34ff 	mov.w	r4, #4294967295
 8001048:	4620      	mov	r0, r4
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	20000648 	.word	0x20000648

08001050 <_malloc_r>:
 8001050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001054:	1ccd      	adds	r5, r1, #3
 8001056:	f025 0503 	bic.w	r5, r5, #3
 800105a:	3508      	adds	r5, #8
 800105c:	2d0c      	cmp	r5, #12
 800105e:	bf38      	it	cc
 8001060:	250c      	movcc	r5, #12
 8001062:	2d00      	cmp	r5, #0
 8001064:	4607      	mov	r7, r0
 8001066:	db01      	blt.n	800106c <_malloc_r+0x1c>
 8001068:	42a9      	cmp	r1, r5
 800106a:	d905      	bls.n	8001078 <_malloc_r+0x28>
 800106c:	230c      	movs	r3, #12
 800106e:	2600      	movs	r6, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4630      	mov	r0, r6
 8001074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001078:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800114c <_malloc_r+0xfc>
 800107c:	f000 f868 	bl	8001150 <__malloc_lock>
 8001080:	f8d8 3000 	ldr.w	r3, [r8]
 8001084:	461c      	mov	r4, r3
 8001086:	bb5c      	cbnz	r4, 80010e0 <_malloc_r+0x90>
 8001088:	4629      	mov	r1, r5
 800108a:	4638      	mov	r0, r7
 800108c:	f7ff ffc0 	bl	8001010 <sbrk_aligned>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	4604      	mov	r4, r0
 8001094:	d155      	bne.n	8001142 <_malloc_r+0xf2>
 8001096:	f8d8 4000 	ldr.w	r4, [r8]
 800109a:	4626      	mov	r6, r4
 800109c:	2e00      	cmp	r6, #0
 800109e:	d145      	bne.n	800112c <_malloc_r+0xdc>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d048      	beq.n	8001136 <_malloc_r+0xe6>
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	4631      	mov	r1, r6
 80010a8:	4638      	mov	r0, r7
 80010aa:	eb04 0903 	add.w	r9, r4, r3
 80010ae:	f000 f989 	bl	80013c4 <_sbrk_r>
 80010b2:	4581      	cmp	r9, r0
 80010b4:	d13f      	bne.n	8001136 <_malloc_r+0xe6>
 80010b6:	6821      	ldr	r1, [r4, #0]
 80010b8:	4638      	mov	r0, r7
 80010ba:	1a6d      	subs	r5, r5, r1
 80010bc:	4629      	mov	r1, r5
 80010be:	f7ff ffa7 	bl	8001010 <sbrk_aligned>
 80010c2:	3001      	adds	r0, #1
 80010c4:	d037      	beq.n	8001136 <_malloc_r+0xe6>
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	442b      	add	r3, r5
 80010ca:	6023      	str	r3, [r4, #0]
 80010cc:	f8d8 3000 	ldr.w	r3, [r8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d038      	beq.n	8001146 <_malloc_r+0xf6>
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	42a2      	cmp	r2, r4
 80010d8:	d12b      	bne.n	8001132 <_malloc_r+0xe2>
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	e00f      	b.n	8001100 <_malloc_r+0xb0>
 80010e0:	6822      	ldr	r2, [r4, #0]
 80010e2:	1b52      	subs	r2, r2, r5
 80010e4:	d41f      	bmi.n	8001126 <_malloc_r+0xd6>
 80010e6:	2a0b      	cmp	r2, #11
 80010e8:	d917      	bls.n	800111a <_malloc_r+0xca>
 80010ea:	1961      	adds	r1, r4, r5
 80010ec:	42a3      	cmp	r3, r4
 80010ee:	6025      	str	r5, [r4, #0]
 80010f0:	bf18      	it	ne
 80010f2:	6059      	strne	r1, [r3, #4]
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	bf08      	it	eq
 80010f8:	f8c8 1000 	streq.w	r1, [r8]
 80010fc:	5162      	str	r2, [r4, r5]
 80010fe:	604b      	str	r3, [r1, #4]
 8001100:	4638      	mov	r0, r7
 8001102:	f104 060b 	add.w	r6, r4, #11
 8001106:	f000 f829 	bl	800115c <__malloc_unlock>
 800110a:	f026 0607 	bic.w	r6, r6, #7
 800110e:	1d23      	adds	r3, r4, #4
 8001110:	1af2      	subs	r2, r6, r3
 8001112:	d0ae      	beq.n	8001072 <_malloc_r+0x22>
 8001114:	1b9b      	subs	r3, r3, r6
 8001116:	50a3      	str	r3, [r4, r2]
 8001118:	e7ab      	b.n	8001072 <_malloc_r+0x22>
 800111a:	42a3      	cmp	r3, r4
 800111c:	6862      	ldr	r2, [r4, #4]
 800111e:	d1dd      	bne.n	80010dc <_malloc_r+0x8c>
 8001120:	f8c8 2000 	str.w	r2, [r8]
 8001124:	e7ec      	b.n	8001100 <_malloc_r+0xb0>
 8001126:	4623      	mov	r3, r4
 8001128:	6864      	ldr	r4, [r4, #4]
 800112a:	e7ac      	b.n	8001086 <_malloc_r+0x36>
 800112c:	4634      	mov	r4, r6
 800112e:	6876      	ldr	r6, [r6, #4]
 8001130:	e7b4      	b.n	800109c <_malloc_r+0x4c>
 8001132:	4613      	mov	r3, r2
 8001134:	e7cc      	b.n	80010d0 <_malloc_r+0x80>
 8001136:	230c      	movs	r3, #12
 8001138:	4638      	mov	r0, r7
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	f000 f80e 	bl	800115c <__malloc_unlock>
 8001140:	e797      	b.n	8001072 <_malloc_r+0x22>
 8001142:	6025      	str	r5, [r4, #0]
 8001144:	e7dc      	b.n	8001100 <_malloc_r+0xb0>
 8001146:	605b      	str	r3, [r3, #4]
 8001148:	deff      	udf	#255	; 0xff
 800114a:	bf00      	nop
 800114c:	20000644 	.word	0x20000644

08001150 <__malloc_lock>:
 8001150:	4801      	ldr	r0, [pc, #4]	; (8001158 <__malloc_lock+0x8>)
 8001152:	f7ff bf13 	b.w	8000f7c <__retarget_lock_acquire_recursive>
 8001156:	bf00      	nop
 8001158:	20000640 	.word	0x20000640

0800115c <__malloc_unlock>:
 800115c:	4801      	ldr	r0, [pc, #4]	; (8001164 <__malloc_unlock+0x8>)
 800115e:	f7ff bf0e 	b.w	8000f7e <__retarget_lock_release_recursive>
 8001162:	bf00      	nop
 8001164:	20000640 	.word	0x20000640

08001168 <__sflush_r>:
 8001168:	898a      	ldrh	r2, [r1, #12]
 800116a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116c:	4605      	mov	r5, r0
 800116e:	0710      	lsls	r0, r2, #28
 8001170:	460c      	mov	r4, r1
 8001172:	d457      	bmi.n	8001224 <__sflush_r+0xbc>
 8001174:	684b      	ldr	r3, [r1, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	dc04      	bgt.n	8001184 <__sflush_r+0x1c>
 800117a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800117c:	2b00      	cmp	r3, #0
 800117e:	dc01      	bgt.n	8001184 <__sflush_r+0x1c>
 8001180:	2000      	movs	r0, #0
 8001182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001186:	2e00      	cmp	r6, #0
 8001188:	d0fa      	beq.n	8001180 <__sflush_r+0x18>
 800118a:	2300      	movs	r3, #0
 800118c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001190:	682f      	ldr	r7, [r5, #0]
 8001192:	6a21      	ldr	r1, [r4, #32]
 8001194:	602b      	str	r3, [r5, #0]
 8001196:	d032      	beq.n	80011fe <__sflush_r+0x96>
 8001198:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	075a      	lsls	r2, r3, #29
 800119e:	d505      	bpl.n	80011ac <__sflush_r+0x44>
 80011a0:	6863      	ldr	r3, [r4, #4]
 80011a2:	1ac0      	subs	r0, r0, r3
 80011a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011a6:	b10b      	cbz	r3, 80011ac <__sflush_r+0x44>
 80011a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011aa:	1ac0      	subs	r0, r0, r3
 80011ac:	2300      	movs	r3, #0
 80011ae:	4602      	mov	r2, r0
 80011b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011b2:	4628      	mov	r0, r5
 80011b4:	6a21      	ldr	r1, [r4, #32]
 80011b6:	47b0      	blx	r6
 80011b8:	1c43      	adds	r3, r0, #1
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	d106      	bne.n	80011cc <__sflush_r+0x64>
 80011be:	6829      	ldr	r1, [r5, #0]
 80011c0:	291d      	cmp	r1, #29
 80011c2:	d82b      	bhi.n	800121c <__sflush_r+0xb4>
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <__sflush_r+0x100>)
 80011c6:	410a      	asrs	r2, r1
 80011c8:	07d6      	lsls	r6, r2, #31
 80011ca:	d427      	bmi.n	800121c <__sflush_r+0xb4>
 80011cc:	2200      	movs	r2, #0
 80011ce:	6062      	str	r2, [r4, #4]
 80011d0:	6922      	ldr	r2, [r4, #16]
 80011d2:	04d9      	lsls	r1, r3, #19
 80011d4:	6022      	str	r2, [r4, #0]
 80011d6:	d504      	bpl.n	80011e2 <__sflush_r+0x7a>
 80011d8:	1c42      	adds	r2, r0, #1
 80011da:	d101      	bne.n	80011e0 <__sflush_r+0x78>
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	b903      	cbnz	r3, 80011e2 <__sflush_r+0x7a>
 80011e0:	6560      	str	r0, [r4, #84]	; 0x54
 80011e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011e4:	602f      	str	r7, [r5, #0]
 80011e6:	2900      	cmp	r1, #0
 80011e8:	d0ca      	beq.n	8001180 <__sflush_r+0x18>
 80011ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d002      	beq.n	80011f8 <__sflush_r+0x90>
 80011f2:	4628      	mov	r0, r5
 80011f4:	f7ff fec4 	bl	8000f80 <_free_r>
 80011f8:	2000      	movs	r0, #0
 80011fa:	6360      	str	r0, [r4, #52]	; 0x34
 80011fc:	e7c1      	b.n	8001182 <__sflush_r+0x1a>
 80011fe:	2301      	movs	r3, #1
 8001200:	4628      	mov	r0, r5
 8001202:	47b0      	blx	r6
 8001204:	1c41      	adds	r1, r0, #1
 8001206:	d1c8      	bne.n	800119a <__sflush_r+0x32>
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0c5      	beq.n	800119a <__sflush_r+0x32>
 800120e:	2b1d      	cmp	r3, #29
 8001210:	d001      	beq.n	8001216 <__sflush_r+0xae>
 8001212:	2b16      	cmp	r3, #22
 8001214:	d101      	bne.n	800121a <__sflush_r+0xb2>
 8001216:	602f      	str	r7, [r5, #0]
 8001218:	e7b2      	b.n	8001180 <__sflush_r+0x18>
 800121a:	89a3      	ldrh	r3, [r4, #12]
 800121c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001220:	81a3      	strh	r3, [r4, #12]
 8001222:	e7ae      	b.n	8001182 <__sflush_r+0x1a>
 8001224:	690f      	ldr	r7, [r1, #16]
 8001226:	2f00      	cmp	r7, #0
 8001228:	d0aa      	beq.n	8001180 <__sflush_r+0x18>
 800122a:	0793      	lsls	r3, r2, #30
 800122c:	bf18      	it	ne
 800122e:	2300      	movne	r3, #0
 8001230:	680e      	ldr	r6, [r1, #0]
 8001232:	bf08      	it	eq
 8001234:	694b      	ldreq	r3, [r1, #20]
 8001236:	1bf6      	subs	r6, r6, r7
 8001238:	600f      	str	r7, [r1, #0]
 800123a:	608b      	str	r3, [r1, #8]
 800123c:	2e00      	cmp	r6, #0
 800123e:	dd9f      	ble.n	8001180 <__sflush_r+0x18>
 8001240:	4633      	mov	r3, r6
 8001242:	463a      	mov	r2, r7
 8001244:	4628      	mov	r0, r5
 8001246:	6a21      	ldr	r1, [r4, #32]
 8001248:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800124c:	47e0      	blx	ip
 800124e:	2800      	cmp	r0, #0
 8001250:	dc06      	bgt.n	8001260 <__sflush_r+0xf8>
 8001252:	89a3      	ldrh	r3, [r4, #12]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	81a3      	strh	r3, [r4, #12]
 800125e:	e790      	b.n	8001182 <__sflush_r+0x1a>
 8001260:	4407      	add	r7, r0
 8001262:	1a36      	subs	r6, r6, r0
 8001264:	e7ea      	b.n	800123c <__sflush_r+0xd4>
 8001266:	bf00      	nop
 8001268:	dfbffffe 	.word	0xdfbffffe

0800126c <_fflush_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	690b      	ldr	r3, [r1, #16]
 8001270:	4605      	mov	r5, r0
 8001272:	460c      	mov	r4, r1
 8001274:	b913      	cbnz	r3, 800127c <_fflush_r+0x10>
 8001276:	2500      	movs	r5, #0
 8001278:	4628      	mov	r0, r5
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	b118      	cbz	r0, 8001286 <_fflush_r+0x1a>
 800127e:	6a03      	ldr	r3, [r0, #32]
 8001280:	b90b      	cbnz	r3, 8001286 <_fflush_r+0x1a>
 8001282:	f7ff fc99 	bl	8000bb8 <__sinit>
 8001286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f3      	beq.n	8001276 <_fflush_r+0xa>
 800128e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001290:	07d0      	lsls	r0, r2, #31
 8001292:	d404      	bmi.n	800129e <_fflush_r+0x32>
 8001294:	0599      	lsls	r1, r3, #22
 8001296:	d402      	bmi.n	800129e <_fflush_r+0x32>
 8001298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800129a:	f7ff fe6f 	bl	8000f7c <__retarget_lock_acquire_recursive>
 800129e:	4628      	mov	r0, r5
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff ff61 	bl	8001168 <__sflush_r>
 80012a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012a8:	4605      	mov	r5, r0
 80012aa:	07da      	lsls	r2, r3, #31
 80012ac:	d4e4      	bmi.n	8001278 <_fflush_r+0xc>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	059b      	lsls	r3, r3, #22
 80012b2:	d4e1      	bmi.n	8001278 <_fflush_r+0xc>
 80012b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012b6:	f7ff fe62 	bl	8000f7e <__retarget_lock_release_recursive>
 80012ba:	e7dd      	b.n	8001278 <_fflush_r+0xc>

080012bc <__swhatbuf_r>:
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	460c      	mov	r4, r1
 80012c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c4:	4615      	mov	r5, r2
 80012c6:	2900      	cmp	r1, #0
 80012c8:	461e      	mov	r6, r3
 80012ca:	b096      	sub	sp, #88	; 0x58
 80012cc:	da0c      	bge.n	80012e8 <__swhatbuf_r+0x2c>
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	2100      	movs	r1, #0
 80012d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012d6:	bf0c      	ite	eq
 80012d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80012dc:	2340      	movne	r3, #64	; 0x40
 80012de:	2000      	movs	r0, #0
 80012e0:	6031      	str	r1, [r6, #0]
 80012e2:	602b      	str	r3, [r5, #0]
 80012e4:	b016      	add	sp, #88	; 0x58
 80012e6:	bd70      	pop	{r4, r5, r6, pc}
 80012e8:	466a      	mov	r2, sp
 80012ea:	f000 f849 	bl	8001380 <_fstat_r>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	dbed      	blt.n	80012ce <__swhatbuf_r+0x12>
 80012f2:	9901      	ldr	r1, [sp, #4]
 80012f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80012f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80012fc:	4259      	negs	r1, r3
 80012fe:	4159      	adcs	r1, r3
 8001300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001304:	e7eb      	b.n	80012de <__swhatbuf_r+0x22>

08001306 <__smakebuf_r>:
 8001306:	898b      	ldrh	r3, [r1, #12]
 8001308:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800130a:	079d      	lsls	r5, r3, #30
 800130c:	4606      	mov	r6, r0
 800130e:	460c      	mov	r4, r1
 8001310:	d507      	bpl.n	8001322 <__smakebuf_r+0x1c>
 8001312:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001316:	6023      	str	r3, [r4, #0]
 8001318:	6123      	str	r3, [r4, #16]
 800131a:	2301      	movs	r3, #1
 800131c:	6163      	str	r3, [r4, #20]
 800131e:	b002      	add	sp, #8
 8001320:	bd70      	pop	{r4, r5, r6, pc}
 8001322:	466a      	mov	r2, sp
 8001324:	ab01      	add	r3, sp, #4
 8001326:	f7ff ffc9 	bl	80012bc <__swhatbuf_r>
 800132a:	9900      	ldr	r1, [sp, #0]
 800132c:	4605      	mov	r5, r0
 800132e:	4630      	mov	r0, r6
 8001330:	f7ff fe8e 	bl	8001050 <_malloc_r>
 8001334:	b948      	cbnz	r0, 800134a <__smakebuf_r+0x44>
 8001336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800133a:	059a      	lsls	r2, r3, #22
 800133c:	d4ef      	bmi.n	800131e <__smakebuf_r+0x18>
 800133e:	f023 0303 	bic.w	r3, r3, #3
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	81a3      	strh	r3, [r4, #12]
 8001348:	e7e3      	b.n	8001312 <__smakebuf_r+0xc>
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	6020      	str	r0, [r4, #0]
 800134e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001352:	81a3      	strh	r3, [r4, #12]
 8001354:	9b00      	ldr	r3, [sp, #0]
 8001356:	6120      	str	r0, [r4, #16]
 8001358:	6163      	str	r3, [r4, #20]
 800135a:	9b01      	ldr	r3, [sp, #4]
 800135c:	b15b      	cbz	r3, 8001376 <__smakebuf_r+0x70>
 800135e:	4630      	mov	r0, r6
 8001360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001364:	f000 f81e 	bl	80013a4 <_isatty_r>
 8001368:	b128      	cbz	r0, 8001376 <__smakebuf_r+0x70>
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	f023 0303 	bic.w	r3, r3, #3
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	81a3      	strh	r3, [r4, #12]
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	431d      	orrs	r5, r3
 800137a:	81a5      	strh	r5, [r4, #12]
 800137c:	e7cf      	b.n	800131e <__smakebuf_r+0x18>
	...

08001380 <_fstat_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	2300      	movs	r3, #0
 8001384:	4d06      	ldr	r5, [pc, #24]	; (80013a0 <_fstat_r+0x20>)
 8001386:	4604      	mov	r4, r0
 8001388:	4608      	mov	r0, r1
 800138a:	4611      	mov	r1, r2
 800138c:	602b      	str	r3, [r5, #0]
 800138e:	f7ff fabd 	bl	800090c <_fstat>
 8001392:	1c43      	adds	r3, r0, #1
 8001394:	d102      	bne.n	800139c <_fstat_r+0x1c>
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	b103      	cbz	r3, 800139c <_fstat_r+0x1c>
 800139a:	6023      	str	r3, [r4, #0]
 800139c:	bd38      	pop	{r3, r4, r5, pc}
 800139e:	bf00      	nop
 80013a0:	2000063c 	.word	0x2000063c

080013a4 <_isatty_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	2300      	movs	r3, #0
 80013a8:	4d05      	ldr	r5, [pc, #20]	; (80013c0 <_isatty_r+0x1c>)
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	602b      	str	r3, [r5, #0]
 80013b0:	f7ff fabb 	bl	800092a <_isatty>
 80013b4:	1c43      	adds	r3, r0, #1
 80013b6:	d102      	bne.n	80013be <_isatty_r+0x1a>
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	b103      	cbz	r3, 80013be <_isatty_r+0x1a>
 80013bc:	6023      	str	r3, [r4, #0]
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	2000063c 	.word	0x2000063c

080013c4 <_sbrk_r>:
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	2300      	movs	r3, #0
 80013c8:	4d05      	ldr	r5, [pc, #20]	; (80013e0 <_sbrk_r+0x1c>)
 80013ca:	4604      	mov	r4, r0
 80013cc:	4608      	mov	r0, r1
 80013ce:	602b      	str	r3, [r5, #0]
 80013d0:	f7ff fac2 	bl	8000958 <_sbrk>
 80013d4:	1c43      	adds	r3, r0, #1
 80013d6:	d102      	bne.n	80013de <_sbrk_r+0x1a>
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	b103      	cbz	r3, 80013de <_sbrk_r+0x1a>
 80013dc:	6023      	str	r3, [r4, #0]
 80013de:	bd38      	pop	{r3, r4, r5, pc}
 80013e0:	2000063c 	.word	0x2000063c

080013e4 <_init>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr

080013f0 <_fini>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr
